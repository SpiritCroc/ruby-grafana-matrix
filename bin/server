#!/usr/bin/env ruby

require 'grafana_matrix'
require 'json'
require 'matrix_sdk'
require 'sinatra'

config = GrafanaMatrix::Config.new 'config.yml'
renderer = GrafanaMatrix::Renderer.new

set :bind, config.bind if config.bind?
set :port, config.port if config.port?

post '/hook' do
  rule = params[:rule]
  halt 400, 'Missing rule name' unless rule

  rule = config.rule(rule) rescue nil
  halt 404, 'No such rule configured' unless rule

  data = JSON.parse(request.body.read)
  halt 400, 'No notification body provided' unless data

  logger.debug 'Data:'
  logger.debug data

  client = rule.client
  halt 500, 'Unable to acquire Matrix client from rule' unless client

  room = rule.room if rule.room.start_with? '!'
  room ||= client.join_room(rule.room)
  halt 500, 'Unable to acquire Matrix room from rule and client' unless room

  plain = renderer.render_plain(data, rule)
  html = renderer.render_html(data, rule)

  logger.debug 'Plain:'
  logger.debug plain

  logger.debug 'HTML:'
  logger.debug html

  # Support rules with nil client explicitly specified, for testing
  return unless client.is_a? MatrixSdk::Api

  client.send_message_event(room, 'm.room.message',
                            msgtype: 'm.notice',
                            body: plain,
                            formatted_body: html,
                            format: 'org.matrix.custom.html')

  ''
end
